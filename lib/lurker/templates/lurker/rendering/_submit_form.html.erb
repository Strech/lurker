<script type="text/jsx">
  /** @jsx React.DOM */
  var SubmitForm = React.createClass({
    mixins: [ReactCatalyst.LinkedStateMixin],
    runsOnLocalhost: function() {
      return window.location.hostname == '127.0.0.1' || window.location.hostname == 'localhost'
    },
    getInitialState: function() {
      var state = {};
      var values = JSON.parse('<%= @url_params.map { |k,v| { label:k, value: v} } .to_json.html_safe %>');
      var template = '<%= @endpoint_presenter.named_path %>';
      var method = '<%= @endpoint_presenter.verb %>';
      var hosts = JSON.parse('<%= @service_presenter.domains.to_json.html_safe %>');
      var host = '<%= @service_presenter.default_domain %>';

      var i;
      var includesLocalhost = false;
      for (i in hosts) {
        if (hosts[i] == '/') {
          includesLocalhost = true;
          if (this.runsOnLocalhost()) {
            host = hosts[i] = window.location.origin;
          }
        } else {
          hosts[i] = hosts[i].replace(/\$/, '');
        }

        if (window.location.origin == hosts[i]) {
          host = hosts[i];
        }
      };

      if (!includesLocalhost && this.runsOnLocalhost()) {
        host = hosts['Local'] = window.location.origin;
      }

      state.host = host;
      state.hosts = hosts;
      state.method = method;
      state.values = values;
      state.template = template;
      state.action = this.renderAction(host, template, values);
      state.curl = this.renderCurl(method, host, template, values, jQuery.param(JSON.parse('<%= @post_params.to_json.html_safe %>')));
      return state;
    },
    getPayload: function() {
      // FIXME
      return jQuery('#post-payload input').serialize();
    },
    getHostname: function(host) {
      return host;
    },
    renderAction: function(host, template, values) {
      var action = template;
      var i;
      for (i in values) {
        action = action.replace(new RegExp(':' + values[i].label), values[i].value);
      }
      return this.getHostname(host) + action;
    },
    renderCurl: function(method, host, template, values, payload) {
      var url = '"' + this.renderAction(host, template, values) + '"';
      if (payload.length > 0) {
        url = '-d "' + (payload || this.getPayload()) + '" ' + url;
      }
      return 'curl -X ' + method + " " + url;
    },
    // see react-catalyst.js
    afterSetPartialState: function() {
      this.setState({
        action: this.renderAction(this.state.host, this.state.template, this.state.values),
        curl: this.renderCurl(this.state.method, this.state.host, this.state.template, this.state.values, jQuery('#post-payload input').serialize())
      });
    },
    handleSubmit: function() {
      // FIXME
      Lurker.onSubmit(jQuery('#payload'));
      return false;
    },
    render: function() {
      var hostOptions = [];
      var name;
      for (name in this.state.hosts) {
        var hostUrl = this.state.hosts[name];
        hostOptions.push(<option value={hostUrl}>{name}</option>);
      };
      return (
        <form accept-charset="UTF-8" action={this.state.action} onSubmit={this.handleSubmit} id="payload" className="form-horizontal bs-example hidden-print" method="<%= @endpoint_presenter.form_verb %>">
          <input name="_method" value="<%= @endpoint_presenter.verb %>" type="hidden" />
          <div className="form-group">
            <label className="control-label col-sm-1"forHtml="hostname">Lurk!</label>
            <div className="col-sm-11">
              <select id="hostname" className="form-control" valueLink={this.linkState('host')}>
                {hostOptions}
              </select>
            </div>
          </div>

          <div id="curl" className="form-group">
            <p className="control-label col-sm-1">cURL</p>
            <div className="col-sm-11">
              <pre>{this.state.curl}</pre>
            </div>
          </div>

          <% if @url_params.present? %>
            <div className="bs-example url-params" id="url-payload">
              <fieldset ref="url-params">
                <% @url_params.each_with_index do |(label, value), i| %>
                  <div className="form-group">
                    <label className="control-label col-sm-3" htmlFor="<%= label %>"><%= label %></label>
                    <div className="col-sm-9">
                      <input type="text" valueLink={this.linkState('values.<%= i %>.value')} className="form-control"></input>
                    </div>
                  </div>
                <% end %>
              </fieldset>
            </div>
          <% end %>

          <% if @post_params.present? %>
            <div className="bs-example post-params" id="post-payload">
              <fieldset ref="post-params">
                <%= Lurker::FormBuilder.new(@post_params).html.html_safe %>
              </fieldset>
            </div>
          <% end %>

          <div className="form-group row">
            <div className="col-sm-offset-3 col-sm-9">
              <input id="submit-api" type="submit" className="btn btn-primary pull-right"></input>
            </div>
          </div>
        </form>
      );
    }
  });

  var submitForm = <SubmitForm template="<%= @endpoint_presenter.named_path %>" />;
  // FIXME: see multidomain feature - cannot select node in phantomjs
  window.submitForm = submitForm;
  React.renderComponent(submitForm, document.getElementById('submit-form'));
</script>
<div id='submit-form'></div>
